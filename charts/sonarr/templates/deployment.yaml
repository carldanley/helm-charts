apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "sonarr.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "sonarr.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  minReadySeconds: 5
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "sonarr.labels" . | nindent 8 }}
      annotations:
        {{- if and .Values.persistence.enabled .Values.persistence.veleroSchedule }}
        backup.velero.io/backup-volumes: config
        {{- end }}
    spec:
      initContainers:
      - name: copy-scripts
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "/init-copy-scripts/copy-files.sh"]
        volumeMounts:
        - name: init-copy
          mountPath: /init-copy-scripts
        - name: script-files
          mountPath: /script-files
        - name: scripts
          mountPath: /scripts
      containers:
      - name: sonarr
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8989
        env:
        - name: PUID
          value: {{ .Values.puid | quote }}
        - name: PGID
          value: {{ .Values.pgid | quote }}
        - name: TZ
          value: {{ .Values.timezone | quote }}
        volumeMounts:
        - name: shows
          mountPath: /tv
          readOnly: false
        - name: config
          mountPath: /config
          readOnly: false
        - name: downloads
          mountPath: /downloads
          readOnly: false
        - name: scripts
          mountPath: /scripts
          readOnly: false
      volumes:
      # any 1-off scripts will be stored here (so they can be available for radarr)
      - name: init-copy
        configMap:
          name: {{ .Release.Name }}-init-copy
      - name: script-files
        configMap:
          name: {{ .Release.Name }}-scripts
      - name: scripts
        emptyDir: {}
      # sonarr will look for downloaded shows in this folder
      - name: downloads
      {{- if .Values.volumes.downloads -}}
        {{ toYaml .Values.volumes.downloads | nindent 8 }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      # when sonarr has detected a show, it will be moved to this
      # directory for long-term storage
      - name: shows
      {{- if .Values.volumes.shows -}}
        {{ toYaml .Values.volumes.shows | nindent 8 }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: config
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}
      {{- else }}
        emptyDir: {}
      {{- end }}


